// <auto-generated />
using System;
using System.Collections.Generic;
using EmoMeter.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmoMeter.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmoMeter.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "EmoMeter.Domain.Entities.Event.CreatedAt#CreatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "EmoMeter.Domain.Entities.Event.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(400)
                                .HasColumnType("character varying(400)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("EventDate", "EmoMeter.Domain.Entities.Event.EventDate#EventDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("end_date");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("start_date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Format", "EmoMeter.Domain.Entities.Event.Format#Format", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("format");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Location", "EmoMeter.Domain.Entities.Event.Location#Location", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "EmoMeter.Domain.Entities.Event.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("UserId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("EmoMeter.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("ChatId", "EmoMeter.Domain.Entities.User.ChatId#ChatId", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("chat_id");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "EmoMeter.Domain.Entities.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NotifyBeforeMinutes", "EmoMeter.Domain.Entities.User.NotifyBeforeMinutes#NotifyBeforeMinutes", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10)
                                .HasColumnName("notify_before_minutes");
                        });

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EmoMeter.Domain.Entities.Event", b =>
                {
                    b.HasOne("EmoMeter.Domain.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("EmoMeter.Domain.ValueObjects.Event.Participant", "Participants", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("name");

                            b1.HasKey("EventId", "__synthesizedOrdinal");

                            b1.ToTable("events");

                            b1.ToJson("participants");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Participants");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmoMeter.Domain.Entities.User", b =>
                {
                    b.OwnsOne("EmoMeter.Domain.ValueObjects.User.AuthorizationCredentials", "AuthorizationCredentials", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AccessToken")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("access_token");

                            b1.Property<string>("RefreshToken")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("refresh_token");

                            b1.Property<DateTimeOffset>("TokenExpiresIn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("token_expires_in");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("AuthorizationCredentials");
                });

            modelBuilder.Entity("EmoMeter.Domain.Entities.User", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
